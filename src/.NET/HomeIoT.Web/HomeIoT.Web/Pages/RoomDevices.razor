@page "/room-devices/{RoomGuid}"
@inject IHttpClientFactory httpClientFactory

<PageTitle>@Header</PageTitle>

<h1>@Header IoT</h1>

@if (lastMeasurment == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    //вместо хардкода будет подгрузка компонентов на основе идентификаторов из сессии
    <div class="d-flex flex-wrap gap-3">
            <ClimateMeasurmentsCard Temperature=@lastMeasurment.Temperature Humidity=@lastMeasurment.Humidity MeasurmentTime=@lastMeasurment.MeasurmentTime />
            <ThermostatCard ThermostatSetting=25/>
    </div>
}

@code {
    //заметка для себя: будет брать из сессии по id, а при остутвии перезагружать сессию
    //сессия будет содержать список комнат и их девайсов ,загружая их из специального сервиса при старте приложения
    private string Header { get; set; } = "Living Room";

    [Parameter]
    public string RoomGuid { get; set; }

    public GetClimateMeasurmentResponse lastMeasurment;

    protected override async Task OnInitializedAsync()
    {
        var getRoomsClient = httpClientFactory.CreateClient("roomClimate");
        var timer = new System.Threading.Timer(
            e =>
            {
                InvokeAsync(async () => 
                {
                    lastMeasurment = await getRoomsClient.GetFromJsonAsync<GetClimateMeasurmentResponse>($"api/Measurments/3628ce16-3a8c-4ff7-94a6-4d57ca7fa65f");
                    StateHasChanged();
                });
            },
            null,
            TimeSpan.Zero,
            TimeSpan.FromSeconds(2)
        );
    }
}
