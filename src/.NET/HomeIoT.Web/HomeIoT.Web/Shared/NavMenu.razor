@inherits LayoutComponentBase
@inject IHttpClientFactory httpClientFactory

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">HomeIoT.Web</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
    @if (getRoomsResponse == null)
    {
        <div class="nav-item px-3">
            
            <NavLink class="nav-link disabled justify-content-center">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </NavLink>
        </div>       
    }
    else
    {
        @foreach(var room in getRoomsResponse.Rooms){
            var link = $"room-devices/{room.RoomGuid}";
            <div class="nav-item px-3">
                <NavLink class="nav-link" href=@link>
                    <span class="oi oi-list-srich" aria-hidden="true"></span> @room.RoomName
                </NavLink>
            </div>
        }
    }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public GetRoomsResponse? getRoomsResponse;
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        var getRoomsClient = httpClientFactory.CreateClient("gateway");
        timer = new Timer(
            e =>
            {
                InvokeAsync(async () => 
                {
                    getRoomsResponse = await getRoomsClient.GetFromJsonAsync<GetRoomsResponse>($"api/rooms");
                    StateHasChanged();
                    if(getRoomsResponse != null) timer.Dispose();
                });
            },
            new object(),
            TimeSpan.Zero,
            TimeSpan.FromSeconds(2)
        );
    }
}
